* Stage One

** DONE Visitors will be able to see content (watch videos) hosted by external servers.
Started [2024-06-11 Tue 10:33]
Finished [2024-06-11 Tue 13:18]

AFAIK this is basically just going to be an HTML5 ~<video>~ tag with a customizable ~src~ URI.

** DONE Visitors should be able to sign up and become an authenticated User
Started [2024-06-11 Tue 13:29]
Finished [2024-06-12 Wed 14:07]

AFAIK this will require an authentication service and the one I have the most experience with is part of Firebase. Once we can have Users, that will bring us to the next goal, creating Posts.

** DONE Users should be able to create Posts
Started [2024-06-11 Tue 13:31]
Finished [2024-06-12 Wed 18:40]

This is where we get into the weeds a bit. I would /sometimes/ prefer that a single User only host content from a single source (i.e. domain). This would mean that everything on the channel is known to come from somewhere specific. But I would also understand if some people wanted to use it as like a literal curation board to save videos they like. So, I think that eventually this will form either two different types of User, two different types of Post, or something to that effect. For now, we will focus on the main use case I see, which is creators hosting their own content, or groups of creators hosting content.

Anyway, AFAIK this will require a little bit of database interaction, but that is about it. The main system I'd like to get in place is just making posts; I can always figure out the per-User URI source or whatever in the future. Like, a post would eventually just have =/videos/blahaj.mp4= as the URI and the site itself would prefix it with the User's source domain, and this sort of Post would be marked as officially sourced or something like that (like maybe on sign-up it can be selected as a verified type of account or something).

In non-relational collection/document db: =/Users/<USER_ID>/Posts/<POST_ID>=
#+begin_example
Post:
|-- postId, Number
|-- title, String
|-- info, String
|-- date, Date
|-- thumbnailURI, String
`-- URI, String
#+end_example

In relational db:
#+begin_example
Users (Table):
|-- userId, Number (Primary Key)
`-- userName, String

Posts (Table):
|-- postId, Number (Primary Key)
|-- userId, Number (Foreign Key)
|-- title, String
|-- info, String
|-- date, Date
|-- thumbnailURI, String
`-- URI, String
#+end_example

** DONE Visitors will be able to see all Posts from a single Channel.
Started [2024-06-11 Tue 10:33]
DONE [2024-06-13 Thu 13:02]

AFAIK this is just going to display a list of Posts from a database.

I think I'm going to experiment with slug routing or whatever it's called when I use the brackets in filenames in =Next.js=. So like ~/u/[channelId]~ or something like that.

If this works well and goes smoothly, it may be worth it to make the see page work like that.

** TODO Users will be able to discover content through Posts from Channels they Track.
Started [2024-06-11 Tue 10:33]

AFAIK this is just going to be an array of user identifiers within each user's data in the database that correspond to channels they have clicked the ~Track~ button for. With these user ids, we may then fetch the, let's say three, most-recent posts and add them to an array of posts to be displayed in the /Tracked/ section. We then sort the array by date in descending order and /voila/ we've got exactly what we need to display to the Tracker.

** TODO Users might be able to leave Comments on Posts
Started [2024-06-13 Thu 18:33]

This will require some stupid data-bundling I think where like 1000 comments go in a single document and there has to be an API for the server to add them in the appropriate spot. Otherwise, if a post has one thousand comments and a user scrolls through them all, that's /one thousand reads from the database/ just for the comments. We will probably also be fetching each commenter's user data for a display name, profile picture, etc. So there's another thousand. And that's one user, one post. They might do ten posts everyday. That would get ... costly. So, bundling one thousand comments in a single document will reduce costs by /gasp/ one thousand times. It's worth it, no matter how annoying.

In order to enforce this bundling and such, there will need to be an API endpoint to create (and probably others to update, delete, etc) comments.

=/api/comment/create=
This would then read the request Authorization header to make sure it's an authenticated user. After that, it would read the request body for the comment's text, what post the comment is for, etc.

Then, there would be the "fun" part of determining which bucket this comment goes in. Most likely each post will have a comment number associated with it that we may then use and increment, and we'll just keep making new buckets every time that gets to one thousand. Or something of that nature.

#+begin_example
/Users (collection)
|-- <USER_ID> (document)
|   `-- .displayName (string)
|   `-- /Posts (subcollection)
|       `-- /<POST_ID> (document)
|           |-- .title (string)
|           |-- .title (string)
|           `-- /Comments (subcollection)
|               |-- /0 (document)
|               |   |-- .0 (object)
|               |   |-- .1 (object)
|               |   `-- ...
|               |-- 1000 (document)
|               |   |-- .1000 (object)
|               |   |-- .1001 (object)
|               |   `-- ...
|               `-- ...
`-- ...
#+end_example

To fetch "all" comments for a given post
#+begin_src js
  await getDocs(collection(db, "/Users/USER_ID/Posts/POST_ID/Comments"));
#+end_src

To fetch "all" comments by a given user (requires custom Firestore index, totally fine)
#+begin_src js
  const ownCommentsQuery = query(
      collectionGroup(db, "Comments"),
      where("commenterUserId", "==", "USER_ID")
  );
  await getDocs(ownCommentsQuery);
#+end_src


